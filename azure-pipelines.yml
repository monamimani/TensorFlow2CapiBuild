# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  tf2GitTag: v2.2.0-rc3
#r2.2 v2.1.0

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

pool:
  vmImage: 'windows-2019'

jobs:
 - job: 'Setup_and_Compile_TensorFlow_2'
   timeoutInMinutes: 240

   steps:
    # - task: Cache@2
    #   inputs:
    #     key: 'TensorFlow2Repo'
    #     path: '$(Pipeline.Workspace)/tf2'
    #     cacheHitVar: 'CACHE_RESTORED'
    #     restoreKeys: 'TensorFlow2Repo'

    - script: git clone --depth 1 --branch $(tf2GitTag) https://github.com/tensorflow/tensorflow.git tf2
      condition: ne(variables.CACHE_RESTORED, 'true')
      displayName: 'Git clone tensorflow 2'

    - script: |
        REM pip3 install six numpy wheel keras_applications keras_preprocessing opt_einsum pandas protobuf wrapt gast==0.3.3 --no-deps
        pip3 install six numpy --no-deps
      displayName: 'Install Python dependencies'

    - script: |
        echo ON
        REM call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
        echo %BAZEL_VS%
        SET BAZEL_VS="C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise"
        SET BAZEL_VC="C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC"
        SET
        cd tf2
        REM bazelisk test -c opt //tensorflow/tools/lib_package:libtensorflow_test
        bazelisk build -s --config=c++17 --verbose_failures --define=no_tensorflow_py_deps=true -c opt //tensorflow/tools/lib_package:libtensorflow
        robocopy bazel-bin/tensorflow/tools/lib_package/libtensorflow.tar.gz $(Build.ArtifactStagingDirectory)
      displayName: 'Build tensorflow'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'TensorFlow_$(tf2GitTag)'
        publishLocation: 'Container'